View(z.plot)
# Import 16S Data ---------------------------------------------------------
# Import OTU table
otus <- read.csv("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/diversity_analysis_07032017/table_even93527.txt",sep = "\t",header = TRUE,row.names = 1,skip = 0,check.names=FALSE)
# Re-order columns (1:4 Baseline, 5:8 Donor, 9:12 PostFMT) [This puts the samples in the same order as in the metabolomics data table]
otus <- otus[,c("S1.8","S2.1","S8.17","S10.22","S1.7","S2.11","S8.16","S10.24","S1.9","S2.12","S8.18","S10.23")]
otus <- as.matrix(t(otus))
# Also import the metabolomics table because it has the Group column
metabolomics <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/Analysis in R/Metabolomics Data/1_metabolomics_table_with_subjects_and_groups.txt",sep = "\t",header = TRUE, row.names = 1, check.names = FALSE)
mapping <- metabolomics[,2,drop=FALSE]
z <- rankabundance(otus, mapping, factor = "Group", level = "Baseline")
z <- as.data.frame(z)
z <- tibble::rownames_to_column(z, "OTU")
z <- z[1:20,]
# rankabunplot(z, scale="abundance", pch=16)
z.plot <- z[,1,drop=FALSE]
z.plot[,2] <- z[,3,drop=FALSE]
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
tax_info <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/uclust_assigned_taxonomy/rep_set_tax_assignments.txt",sep = "\t",header = FALSE, row.names = 1, check.names = FALSE)
z.plot$OTU <- tax_info$V2[match(z.plot$OTU, rownames(tax_info))]
View(z.plot)
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
View(z.plot)
z.plot$OTU
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
z <- rankabundance(otus, mapping, factor = "Group", level = "Baseline")
z <- as.data.frame(z)
z <- tibble::rownames_to_column(z, "OTU")
#Select top 20 in 'z'
z <- z[1:20,]
# rankabunplot(z, scale="abundance", pch=16)
z.plot <- z[,1,drop=FALSE]
z.plot[,2] <- z[,3,drop=FALSE]
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
z.plot$OTU
z.plot$OTU <- tax_info$V2[match(z.plot$OTU, rownames(tax_info))]
View(z.plot)
z.plot$OTU
z.plot$taxa <- tax_info$V2[match(z.plot$taxa, rownames(tax_info))]
levels(z.plot$taxa) <- levels(z.plot$OTU)
# Import 16S Data ---------------------------------------------------------
# Import OTU table
otus <- read.csv("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/diversity_analysis_07032017/table_even93527.txt",sep = "\t",header = TRUE,row.names = 1,skip = 0,check.names=FALSE)
# Re-order columns (1:4 Baseline, 5:8 Donor, 9:12 PostFMT) [This puts the samples in the same order as in the metabolomics data table]
otus <- otus[,c("S1.8","S2.1","S8.17","S10.22","S1.7","S2.11","S8.16","S10.24","S1.9","S2.12","S8.18","S10.23")]
otus <- as.matrix(t(otus))
# Also import the metabolomics table because it has the Group column
metabolomics <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/Analysis in R/Metabolomics Data/1_metabolomics_table_with_subjects_and_groups.txt",sep = "\t",header = TRUE, row.names = 1, check.names = FALSE)
mapping <- metabolomics[,2,drop=FALSE]
z <- rankabundance(otus, mapping, factor = "Group", level = "Baseline")
z <- as.data.frame(z)
z <- tibble::rownames_to_column(z, "OTU")
#Select top 20 in 'z'
z <- z[1:20,]
# rankabunplot(z, scale="abundance", pch=16)
z.plot <- z[,1,drop=FALSE]
z.plot[,2] <- z[,3,drop=FALSE]
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
# Convert OTU IDs to taxonomies
tax_info <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/uclust_assigned_taxonomy/rep_set_tax_assignments.txt",sep = "\t",header = FALSE, row.names = 1, check.names = FALSE)
z.plot$taxa <- tax_info$V2[match(z.plot$taxa, rownames(tax_info))]
View(z.plot)
z.plot$taxa <- tax_info$V2[match(z.plot$OTU, rownames(tax_info))]
View(z.plot)
levels(z.plot$taxa) <- levels(z.plot$OTU)
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
z.plot$OTU
View(z.plot)
z.plot$taxa <- reorder(z.plot$taxa, z.plot$OTU)
z.plot(taxa)
z.plot$taxa
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=taxa, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance") +
scale_x_continuous(breaks = OTU, labels = taxa)
?scale_x_continuous
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance") +
scale_x_continuous(breaks = z.plot$OTU, labels = taxa)
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance") +
scale_x_continuous(breaks = z.plot$OTU, labels = z.plot$taxa)
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = z.plot$OTU, labels = z.plot$taxa)
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance") +
z
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = z.plot$OTU, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = taxa, labels = taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = z.plot$taxa, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = OTU, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_continuous(breaks = z.plot$OTU, labels = as.factor(z.plot$taxa)) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks = z.plot$OTU, labels = as.factor(z.plot$taxa)) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks = z.plot$OTU, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
otus
levels(otus)
levels(Group)
z <- rankabundance(otus, mapping, factor = "Group", level = "PostFMT")
z <- as.data.frame(z)
z <- tibble::rownames_to_column(z, "OTU")
#Select top 20 in 'z'
z <- z[1:20,]
# rankabunplot(z, scale="abundance", pch=16)
z.plot <- z[,1,drop=FALSE]
z.plot[,2] <- z[,3,drop=FALSE]
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
# Convert OTU IDs to taxonomies
tax_info <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/uclust_assigned_taxonomy/rep_set_tax_assignments.txt",sep = "\t",header = FALSE, row.names = 1, check.names = FALSE)
z.plot$taxa <- tax_info$V2[match(z.plot$OTU, rownames(tax_info))]
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks = z.plot$OTU, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
?rankabundance
z <- rankabundance(otus, mapping, scale = "accumfreq", factor = "Group", level = "PostFMT")
z <- rankabundance(otus, mapping, scale = "accumfreq", factor = "Group", level = "PostFMT")
z <- rankabundance(otus, mapping, factor = "Group", level = "PostFMT", scale = "accumfreq")
View(z)
View(z)
z <- rankabundance(otus, mapping, factor = "Group", level = "PostFMT")
z <- rankabuncomp(otus, mapping, factor = "Group", level = "PostFMT", scale = "accumfreq")
z <- rankabundance(otus, mapping, factor = "Group", level = "PostFMT")
z <- as.data.frame(z)
z <- tibble::rownames_to_column(z, "OTU")
#Select top 20 in 'z'
z <- z[1:20,]
# rankabunplot(z, scale="abundance", pch=16)
z.plot <- z[,1,drop=FALSE]
z.plot[,2] <- z[,3,drop=FALSE]
z.plot$OTU <- factor(z.plot$OTU, levels = z.plot$OTU)
# Convert OTU IDs to taxonomies
tax_info <- read.table("/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/uclust_assigned_taxonomy/rep_set_tax_assignments.txt",sep = "\t",header = FALSE, row.names = 1, check.names = FALSE)
z.plot$taxa <- tax_info$V2[match(z.plot$OTU, rownames(tax_info))]
ggplot(z.plot, aes(x=OTU, y=abundance)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks = z.plot$OTU, labels = z.plot$taxa) +
theme(axis.text.x = element_text(angle = -90, hjust = 0,size=3)) +
xlab("") + ylab("Abundance")
View(otus)
View(z)
View(z.plot)
otus[,'851865']
View(mapping)
library(ggplot2)
library(vegan)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)
library(stringr)
library(randomForest)
library(knitr)
library(ggthemes)
library(RColorBrewer)
# Importing and Formatting the OTU Table for Taxonomy Plots ----------------------------------
# To import an OTU table to use with Phyloseq, convert .biom file to JSON format (from: https://twbattaglia.gitbooks.io/introduction-to-qiime/content/phyloseq.html)
# # Ex. biom convert -i table_even93527.biom -o table_even93527_json.biom --to-json --table-type="OTU table"
# Import OTU table (in JSON format) and tree
otutable <- import_biom(BIOMfilename = '/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/diversity_analysis_07032017/table_even93527_json.biom',
treefilename = '/Users/david/Documents Pt. 2/UC Microbiome Research/16S Data/otus (06272017 UCI Analysis)/rep_set.tre',
parseFunction = parse_taxonomy_greengenes)
# Import mapping file
mapping <- import_qiime_sample_data(mapfilename = '/Users/david/Documents Pt. 2/UC Microbiome Research/Analysis in R/1_mapping_file.txt')
# Merge map and otu table into once phyloseq object
phylo <- merge_phyloseq(otutable, mapping)
# Remove zero sum OTUs
phylo = prune_taxa(taxa_sums(phylo) > 0, phylo)
# Check sample + OTU count
phylo
# Verify taxonomic lineage names are correct
rank_names(phylo)
# Remove "[" and "]" characters from the taxonomy table
tax_table(phylo) =gsub("\\[|\\]", "", tax_table(phylo))
# Figure out which taxa levels have "NA"s in them in tax_table(phylo) and save them to a variable called 'tax_edit'
tax_edit <- colnames(tax_table(phylo))[colSums(is.na(tax_table(phylo))) > 0]
tax_edit_names <- tolower(tax_edit)
tax_edit_names <- paste(tax_edit_names, "_name", sep="")
# Pull taxa names for all taxa columns containing NA values
for (i in 1:length(tax_edit)){
pullTaxa <- function(OTU, phylo){
# Makes a string label using the lowest informative tax level
#
# Args:
#   OTU: OTU number
#   phylo: the phyloseq object with the tax table
#
# Returns:
#   a tax name
OTU <- as.character(OTU)  # the OTU numbers are stored as character not integer!
taxstrings <- as.character(tax_table(phylo)[OTU])
tax_level <- which(colnames(tax_table(phylo))==tax_edit[i]) # looks at column 6 of taxonomy table (genus)
tax_name  <- taxstrings[tax_level]
tax_name
}
# Grabs the taxa name
assign(tax_edit_names[i],NULL)
d <- get(tax_edit_names[i])
eval(parse(text=paste('rm(', tax_edit_names[i], ')'))) # remove the original object from memory
for (j in 1:length(taxa_names(phylo))){
d <- rbind(d, c(pullTaxa(taxa_names(phylo)[j],phylo)))
d <- replace(d,is.na(d),paste0("Not resolved to ",tolower(tax_edit[i])," level"))
#print(get(tax_edit_names[i]))
#tax_edit_name <- replace(tax_edit_name,is.na(tax_edit_name),"Unknown")
assign(tax_edit_names[i], d)
}
}
# Merge the genus and species into a variable 'genus_species_name'
genus_species_name <- NULL
for (i in 1:length(species_name)){
if (species_name[i] == 'Not resolved to species level') {
genus_species_name[i] = "Not resolved to species level"
} else if (genus_name[i] == 'Not resolved to genus level') {
genus_species_name[i] = "Not resolved to species level"
} else genus_species_name[i] = str_c(genus_name[i]," ",species_name[i])
}
# Replace Family, Genus, and Species columns in tax_table(phylo) with
# extracted names (since these include "Not resolved at the ___ level")
tax_table(phylo)[,5] <- family_name
tax_table(phylo)[,6] <- genus_name
tax_table(phylo)[,7] <- genus_species_name
# Confirm that the column names are correct
rank_names(phylo)
# Customize the order of the subjects on the x axis (otherwise the default goes "Subject 1" and then "Subject 10"...)
sample_data(phylo)$Subject <- factor(sample_data(phylo)$Subject, c("Subject 1", "Subject 2", "Subject 8", "Subject 10"))
sample_data(phylo)$FullSampleNameSortedByPatient <- factor(sample_data(phylo)$FullSampleNameSortedByPatient, c("Subject 1 Baseline", "Subject 1 Donor", "Subject 1 PostFMT", "Subject 2 Baseline", "Subject 2 Donor", "Subject 2 PostFMT", "Subject 8 Baseline", "Subject 8 Donor", "Subject 8 PostFMT", "Subject 10 Baseline", "Subject 10 Donor", "Subject 10 PostFMT"))
sample_data(phylo)$FullSampleNameSortedByState <- factor(sample_data(phylo)$FullSampleNameSortedByState, c("Subject 1 Baseline", "Subject 2 Baseline", "Subject 8 Baseline", "Subject 10 Baseline", "Subject 1 Donor", "Subject 2 Donor", "Subject 8 Donor", "Subject 10 Donor", "Subject 1 PostFMT", "Subject 2 PostFMT", "Subject 8 PostFMT", "Subject 10 PostFMT"))
for (i in 1:length(taxa_var)){
taxa_colors <- c(
"#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
"#AD6F3B", "#673770","#D14285", "#652926", "#C84248",
"#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861")
current_level <- taxa_var[i] # Refers to the current taxa level in the list as 'current_level'
taxa_plot <- phylo %>%
tax_glom(taxrank = current_level) %>%                # Agglomerate at current taxa level (taxa_var)
transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
psmelt() %>%                                         # Melt to long format
s_arrange(current_level)                             # Arranges taxa_plot by the current_level in alphabetical order
# Set the levels for each column in 'tax_table(phylo)' [For the un-pruned setting]
# Re-set levels manually for the Family, Genus, and Species columns so that "Not resolved to ___ level" is the last level (so that it is always plotted at the bottom of each bar graph and is last on the legend)
taxa_plot[[current_level]] <- factor((taxa_plot[[current_level]]))
taxa_plot <- droplevels(taxa_plot) # Drop unused levels
if (current_level == 'Family'){
taxa_plot$Family <- factor(taxa_plot$Family, levels = c(levels(taxa_plot$Family)[1:17], levels(taxa_plot$Family)[19:30], levels(taxa_plot$Family)[18]))
} else if (current_level == 'Genus'){
taxa_plot$Genus <- factor(taxa_plot$Genus, levels = c(levels(taxa_plot$Genus)[1:30], levels(taxa_plot$Genus)[32:46], levels(taxa_plot$Genus)[31]))
} else if (current_level == 'Species') {
taxa_plot$Species <- factor(taxa_plot$Species, levels = c(levels(taxa_plot$Species)[1:16], levels(taxa_plot$Species)[18:23], levels(taxa_plot$Species)[17]))
}
# Create a table and aggregate by the current_level, in order to look at the relative abundances for all taxa by State
assign(paste0(i,"_",current_level,"_by_State"), setNames(aggregate(taxa_plot$Abundance~taxa_plot$State+taxa_plot[[current_level]], taxa_plot, sum), c("State", current_level, "Abundance")))
# Create a table and aggregate by the current_level, in order to look at the relative abundances for all taxa by State and Subject
assign(paste0(i,"_",current_level,"_by_Subject_and_State"), setNames(aggregate(taxa_plot$Abundance~taxa_plot$Subject+taxa_plot$State+taxa_plot[[current_level]], taxa_plot, sum), c("Subject", "State", current_level, "Abundance")))
# Check levels
# unique(`1_Phylum_by_State`$Phylum)
# unique(`2_Class_by_State`$Class)
# unique(`3_Order_by_State`$Order)
# unique(`4_Family_by_State`$Family)
# unique(`5_Genus_by_State`$Genus)
# unique(`6_Species_by_State`$Species)
# Plot w/ State on x-axis, Facet by Subject
# Expand the color palette and manually replace the last color in the palette to gray for Family, Genus, and Species (since these have "Not resolved to ___ level" at the bottom of the plot - this is to keep the colors the same)
cols <- colorRampPalette(brewer.pal(12, "Set3"))
myPal <- cols(length(unique(taxa_plot[[current_level]])))
if (current_level == 'Family'){
myPal <- replace(myPal, length(myPal), "#BDBAA7")
} else if (current_level == 'Genus'){
myPal <- replace(myPal, length(myPal), "#BDBAA7")
} else if (current_level == 'Species') {
myPal <- replace(myPal, length(myPal), "#BDBAA7")
}
pdf(paste0("/Users/david/Downloads/",i,"_",current_level,"_Composition_by_Subject.pdf"))
print(i) # Prints the current loop level in the console
# Note that within a for loop, you must use "print" before ggplot
print(ggplot(taxa_plot, aes_string(x = "State", y = "Abundance", fill = current_level)) + # Note: using "aes_string" instead of "aes" here so that the fill can be set to a variable
facet_grid(Subject~.) +
geom_bar(stat = "identity") +
scale_fill_manual(values = myPal) +
#scale_fill_manual(values = taxa_colors) +
#scale_fill_pander() + # More ggthemes colors: https://cran.r-project.org/web/packages/ggthemes/vignettes/ggthemes.html
guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
ylab("Relative Abundance \n") +
theme(text = element_text(size = 12), legend.text = element_text(size = 12), axis.text = element_text(size = 12)) +
if (current_level == 'Family'){ # Shrink legend font size for Family, Genus, and Species since the legend is too big
theme(legend.text = element_text(size = 9))
} else if (current_level == 'Genus'){
theme(legend.text = element_text(size = 9))
} else if (current_level == 'Species') {
theme(legend.text = element_text(size = 9))
})
dev.off()
}
taxa_var <- c("Phylum","Class","Order","Family","Genus","Species")
# Create a wrapper/helper function for the dplyr "arrange" function so that string arguments are allowed (since the for loop will go through "taxa_var", the list of strings created above)
eval.string.dplyr = function(.data, .fun.name, ...) { # https://gist.github.com/skranz/9681509
args = list(...)
args = unlist(args)
code = paste0(.fun.name,"(.data,", paste0(args, collapse=","), ")")
df = eval(parse(text=code,srcfile=NULL))
df
}
s_arrange = function(.data, ...) {
eval.string.dplyr(.data,"arrange", ...)
}
# Loop through each taxonomy level in the list and create stacked barplots for each
# Note that if you use the "taxa_colors", you have to add more colors in order to make plots where there are more taxa than colors listed
# Alternatively, use a color palette (i.e. 'scale_fill_pander()', etc.)
# Make plots without pruning (all taxa at the current level will be included)
for (i in 1:length(taxa_var)){
taxa_colors <- c(
"#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
"#AD6F3B", "#673770","#D14285", "#652926", "#C84248",
"#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861")
current_level <- taxa_var[i] # Refers to the current taxa level in the list as 'current_level'
taxa_plot <- phylo %>%
tax_glom(taxrank = current_level) %>%                # Agglomerate at current taxa level (taxa_var)
transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
psmelt() %>%                                         # Melt to long format
s_arrange(current_level)                             # Arranges taxa_plot by the current_level in alphabetical order
# Set the levels for each column in 'tax_table(phylo)' [For the un-pruned setting]
# Re-set levels manually for the Family, Genus, and Species columns so that "Not resolved to ___ level" is the last level (so that it is always plotted at the bottom of each bar graph and is last on the legend)
taxa_plot[[current_level]] <- factor((taxa_plot[[current_level]]))
taxa_plot <- droplevels(taxa_plot) # Drop unused levels
if (current_level == 'Family'){
taxa_plot$Family <- factor(taxa_plot$Family, levels = c(levels(taxa_plot$Family)[1:17], levels(taxa_plot$Family)[19:30], levels(taxa_plot$Family)[18]))
} else if (current_level == 'Genus'){
taxa_plot$Genus <- factor(taxa_plot$Genus, levels = c(levels(taxa_plot$Genus)[1:30], levels(taxa_plot$Genus)[32:46], levels(taxa_plot$Genus)[31]))
} else if (current_level == 'Species') {
taxa_plot$Species <- factor(taxa_plot$Species, levels = c(levels(taxa_plot$Species)[1:16], levels(taxa_plot$Species)[18:23], levels(taxa_plot$Species)[17]))
}
# Create a table and aggregate by the current_level, in order to look at the relative abundances for all taxa by State
assign(paste0(i,"_",current_level,"_by_State"), setNames(aggregate(taxa_plot$Abundance~taxa_plot$State+taxa_plot[[current_level]], taxa_plot, sum), c("State", current_level, "Abundance")))
# Create a table and aggregate by the current_level, in order to look at the relative abundances for all taxa by State and Subject
assign(paste0(i,"_",current_level,"_by_Subject_and_State"), setNames(aggregate(taxa_plot$Abundance~taxa_plot$Subject+taxa_plot$State+taxa_plot[[current_level]], taxa_plot, sum), c("Subject", "State", current_level, "Abundance")))
# Check levels
# unique(`1_Phylum_by_State`$Phylum)
# unique(`2_Class_by_State`$Class)
# unique(`3_Order_by_State`$Order)
# unique(`4_Family_by_State`$Family)
# unique(`5_Genus_by_State`$Genus)
# unique(`6_Species_by_State`$Species)
# Plot w/ State on x-axis, Facet by Subject
# Expand the color palette and manually replace the last color in the palette to gray for Family, Genus, and Species (since these have "Not resolved to ___ level" at the bottom of the plot - this is to keep the colors the same)
cols <- colorRampPalette(brewer.pal(12, "Set3"))
myPal <- cols(length(unique(taxa_plot[[current_level]])))
if (current_level == 'Family'){
myPal <- replace(myPal, length(myPal), "#BDBAA7")
} else if (current_level == 'Genus'){
myPal <- replace(myPal, length(myPal), "#BDBAA7")
} else if (current_level == 'Species') {
myPal <- replace(myPal, length(myPal), "#BDBAA7")
}
pdf(paste0("/Users/david/Downloads/",i,"_",current_level,"_Composition_by_Subject.pdf"))
print(i) # Prints the current loop level in the console
# Note that within a for loop, you must use "print" before ggplot
print(ggplot(taxa_plot, aes_string(x = "State", y = "Abundance", fill = current_level)) + # Note: using "aes_string" instead of "aes" here so that the fill can be set to a variable
facet_grid(Subject~.) +
geom_bar(stat = "identity") +
scale_fill_manual(values = myPal) +
#scale_fill_manual(values = taxa_colors) +
#scale_fill_pander() + # More ggthemes colors: https://cran.r-project.org/web/packages/ggthemes/vignettes/ggthemes.html
guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
ylab("Relative Abundance \n") +
theme(text = element_text(size = 12), legend.text = element_text(size = 12), axis.text = element_text(size = 12)) +
if (current_level == 'Family'){ # Shrink legend font size for Family, Genus, and Species since the legend is too big
theme(legend.text = element_text(size = 9))
} else if (current_level == 'Genus'){
theme(legend.text = element_text(size = 9))
} else if (current_level == 'Species') {
theme(legend.text = element_text(size = 9))
})
dev.off()
}
View(taxa_plot)
rm(list=ls())
toupper("Convergence toward donor microbial and metabolomic profiles after fecal microbiota transplantation in pediatric ulcerative colitis patients")
install.packages("deducer")
install.packages("Deducer")
library(Deducer)
deducer()
?deducer
data.viewer()
JGR()
deducer()
JGR()
JGR
JGR()
install.packages("rentrez")
library(rentrez)
entrez_dbs()
all_the_links <- entrez_link(dbfrom='gene', id=351, db='all')
all_the_links
all_the_links()
all_the_links$links
all_the_links$links$gene_clinvar
all_the_links$links$gene_clinvar_specific
asthma_clinvar <- entrez_link(dbfrom="omim", db="clinvar", cmd="neighbor_history", id=600807)
asthma_clinvar$web_histories
asthma_clinvar$web_histories
install.packages("bioconductor")
source("https://bioconductor.org/biocLite.R")
biocLite()
library(biocLite)
?biocLite
library(Biobase)
library(XML)
library(annotate)
entrezGeneQuery("leukemia", "Homo sapiens")
?entrezGeneQuery
library(annotate)
detach("package:rentrez", unload=TRUE)
library(annotate)
library("annotate", lib.loc="/usr/local/lib/R/3.4/site-library")
library(annotate)
?annotated
?ENTREZID
library("XML", lib.loc="/usr/local/lib/R/3.4/site-library")
install.packages("XML")
library(XML)
install.packages("XML")
library(XML)
source("http://bioconductor.org/biocLite.R"); biocLite()
library(XML)
library(annotate)
library(XML)
library(XML)
library(Biobase)
library(annotate)
entrezGeneQuery("leukemia", "Homo sapiens")
entrezGeneQuery("leukemia", "Homo sapiens")
?entrezGeneQuery
entrezGeneQuery(c("leukemia", "Homo sapiens"))
q1<-entrezGeneQuery(c("leukemia", "Homo sapiens"))
q1
if( interactive())
browseURL(q1[1])
clear
list.files(path = "/Users/david/Documents Pt. 2/UC Microbiome Research/Original 16S Files/Previous Attempt (Sep 2017)/split_libraries_output_separated/FMT_Project")
a <- list.files(path = "/Users/david/Documents Pt. 2/UC Microbiome Research/Original 16S Files/Previous Attempt (Sep 2017)/split_libraries_output_separated/FMT_Project")
as.character(a)
toString(a)
a<-toString(a)
a
a<-gsub(".fastq.gz","",a)
a
a<-gsub(" ","",a)
a
b <- toString(list.files(path = "/Users/david/Documents Pt. 2/UC Microbiome Research/Original 16S Files/Previous Attempt (Sep 2017)/split_libraries_output_separated/FMT_Project"))
b
b <- gsub(" ","",b)
b
plot(cars)
plot(cars)
install.packages("rmarkdown", type = "source")
touch _site.yml
setwd("/Users/david/Documents Pt. 2/UC Microbiome Research/UC-FMT-Omics")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("/Users/david/Documents Pt. 2/UC Microbiome Research/UC-FMT-Omics")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
